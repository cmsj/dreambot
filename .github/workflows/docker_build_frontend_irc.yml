name: IRC Frontend CI Build

on:
  push:
    branches:
      - 'main'
    paths:
      - 'frontend_irc/Dockerfile'
      - 'frontend_irc/dreambot_frontend_irc.py'
      - 'frontend_irc/requirements.txt'
      - '.github/workflows/docker_build_frontend_irc.yml'

env:
  REGISTRY: ghcr.io
  REGISTRY_USER: cmsj
  IMAGE_NAME: dreambot-frontend-irc
  CONTEXT: frontend

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r frontend_irc/requirements.txt
          pip install -r frontend_irc/requirements-test.txt
      - name: Test with pytest
        run: |
          cd frontend_irc
          pytest --doctest-modules --junitxml=junit/test-results.xml --cov=dreambot_frontend_irc --cov-report=xml --cov-report=html
      - name: Test Summary
        uses: test-summary/action@v2
        with:
          paths: "dreambot/**/test-results.xml"
        if: always()

  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    needs: test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner}}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.REGISTRY_USER}}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: ${{ env.CONTEXT }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.output.labels }}

      - name: Delete old images
        uses: actions/delete-package-versions@v4
        with:
          package-name: ${{ env.IMAGE_NAME }}
          package-type: 'container'
          min-versions-to-keep: 10
